#!/bin/bash

# Copyright (C) 2015 Associated Universities, Inc. Washington DC, USA.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# Correspondence concerning GBT software should be addressed as follows:
# GBT Operations
# National Radio Astronomy Observatory
# P. O. Box 2
# Green Bank, WV 24944-0002 USA

cleanup()
{
    # Kill processes if they are still running
    if [ -e /proc/${hash_pid} ]; then
        echo "> Killing fake_gpu (PID ${hash_pid})"
        kill ${hash_pid}
    fi

    if [ -e /proc/${fits_pid} ]; then
        echo "> Killing bfFitsWriter (PID ${fits_pid})"
        echo "QUIT" >> /tmp/tchamber/vegas_fits_control
    fi

    # They should be closed by now, but let's make sure...

    # Set the end time to five seconds from now
    end=$((SECONDS+5))
    hash_closed=0
    fits_closed=0
    # Loop until processes have closed or we have spent 5 seconds waiting
    while [ $SECONDS -lt $end ] && [ $hash_closed -eq 0 ] && [ $fits_closed -eq 0 ]; do
        # TODO: This way should be more portable/better in general; can't get it working. Fix that at some point
#         kill -0 $hash_pid &> /dev/null
#         echo $?
#         if [ $? -ne 0 ]; then
#             hash_closed=1
#         fi

        if [ -e /proc/${hash_pid} ]; then
            hash_closed=1
            echo ">   fake_gpu has exited cleanly"
        fi

        if [ -e /proc/${fits_pid} ]; then
            fits_closed=1
            echo ">   bfFitsWriter has exited cleanly"
        fi
    done

    # Now the either hashpipe and bfFitsWriter are closed or the loop has timed out
    # In the latter case, we will need to do some more cleanup:
    if [ $hash_closed -eq 0 ] || [ $fits_closed -eq 0 ]; then
        echo "> Timed out waiting for processes to die nicely"
        # If hashpipe hasn't closed nicely, ask the user if they would like to force close it
        if [ $hash_closed -eq 0 ]; then
            echo ">   hashpipe failed to close. SIGKILL? \"y\" for yes"
            read res
            if [ "${res,,}" = "y" ]; then
                kill -9 $(hash_pid)
            fi
        fi

        # If bfFitsWriter hasn't closed nicely, ask the user if they would like to force close it
        if [ $fits_closed -eq 0 ]; then
            echo ">   bfFitsWriter failed to close. SIGKILL? \"y\" for yes"
            read res
            if [ "${res,,}" = "y" ]; then
                kill -9 $(fits_pid)
            fi
        fi
    fi
}

# What to do when we trap SIGINT
control_c()
{
    echo -e "\n> We're finished; cleaning up..."
    cleanup
    exit 130
}

# Trap control_c to make sure that we can clean up after ourselves
trap control_c SIGINT

# Write null files to our FIFOs so that they don't have any unexpected commands in them
echo "> Resetting control FIFOs"
cat /dev/null > /tmp/gpu_fifo_npingel_0
cat /dev/null > /tmp/fits_fifo_npingel_0

# Run the fake_gpu
echo "> Starting the fake_gpu hashpipe plugin"
taskset 0x0606 hashpipe -p fake_gpu -I 0 -o BINDHOST=px1-2.gb.nrao.edu -o GPUDEV=0 -o XID=0 -c 3 fake_gpu_thread &
# taskset 0x0606 hashpipe -p fake_gpu -I 0 -o BINDHOST=px1-2.gb.nrao.edu -o GPUDEV=0 -o XID=0 -c 3 fake_gpu_thread -c 2 null_output_thread &
hash_pid=$!
echo ">   The PID of the hashpipe instance running fake_gpu is: ${hash_pid}"

# Set status memory keys
echo "> Setting status keys required for bfFitsWriter"

# This looks in the same directory as this script for set_status
if [ -e "$(dirname ${0})/set_status" ]; then
    $(dirname ${0})/set_status
else
    echo ">   ERROR: set_status not found. It should be in the same directory as this script."
    exit
fi

# Run the fits writer
echo "> Running fits writer"
# /home/sandboxes/tchamber/vegas_devel3/vegas_devel/src/dibas_fits_writer/bfFitsWriter &
# /home/sandboxes/tchamber/bf_fits/beamformer_devel/src/dibas_fits_writer/bfFitsWriter &
/users/npingel/FLAG/bf/repos/FLAG-Beamformer-Devel/src/dibas_fits_writer/bfFitsWriter &
fits_pid=$!
echo ">   The PID of the bfFitsWriter is: ${fits_pid}"

sleep .1
echo -e "\n> READY TO START SCANNING!"
echo -e ">   Use the \"run_scan\" script to run a scan\n"

# Wait for the user to ask us to quit
# ${response,,} makes response lowercase
while [ "${response,,}" != "quit" -a "${response,,}" != "q" ]; do
    echo "> Enter \"Q[UIT]\" to quit!"
    printf "# "
    read response
done

# We're done now; clean up
cleanup
