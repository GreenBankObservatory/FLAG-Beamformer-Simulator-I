# Copyright (C) 2015 Associated Universities, Inc. Washington DC, USA.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# Correspondence concerning GBT software should be addressed as follows:
# GBT Operations
# National Radio Astronomy Observatory
# P. O. Box 2
# Green Bank, WV 24944-0002 USA

cleanup()
{
    echo "> Killing fake_gpu (PID ${hash_pid})"
#     kill ${hash_pid}

    echo "> Killing vegasFitsWriter (PID ${vegas_pid})"
#     echo "QUIT" >> /tmp/tchamber/vegas_fits_control

    # Set the end time to five seconds from now
    end=$((SECONDS+5))
    hash_closed=0
    vegas_closed=0
    while [ $SECONDS -lt $end ] && [ $hash_closed -eq 0 ] && [ $vegas_closed -eq 0 ]; do
        kill -0 $hash_pid &> /dev/null
#         echo $?
        if [ $? -ne 0 ]; then
            hash_closed=1
        fi

        kill -0 $vegas_pid > &/dev/null
        if [ $? -ne 0 ]; then
            vegas_closed=1
        fi
    done

    if [ ${hash_pid} ]; then
        echo ">   fake_gpu has exited cleanly"
    else
        echo ">   fake_gpu has failed to exit cleanly. SIGKILL? \"y\" for yes"
        read res
        if [ ${res} = "y" ]; then
            kill -9 $(hash_pid)
        fi
    fi



    if [ ${vegas_pid} ]; then
        echo ">   vegasFitsWriter has exited cleanly"
    else
        echo ">   vegasFitsWriter has failed to exit cleanly. SIGKILL? \"y\" for yes"
        read res
        if [ ${res} = "y" ]; then
            kill -9 ${vegas_pid}
        fi
    fi
}

# cleanup()
# {
#     echo "> Killing fake_gpu (PID ${hash_pid})"
#     kill ${hash_pid}
#
#     ps -p ${hash_pid} > /dev/null
#     echo "Does it exist? $?"
#     if [ $? ]; then
#         echo ">   fake_gpu has exited cleanly"
#     else
#         echo ">   fake_gpu has failed to exit cleanly. SIGKILL? \"y\" for yes"
#         read res
#         if [ ${res} = "y" ]; then
#             kill -9 $(hash_pid)
#         fi
#     fi
#
#     echo "> Killing vegasFitsWriter (PID ${vegas_pid})"
#     echo "QUIT" >> /tmp/tchamber/vegas_fits_control
#
#     ps -p ${vegas_pid} > /dev/null
#     echo "Does it exist? $?"
#     if [ $? ]; then
#         echo ">   vegasFitsWriter has exited cleanly"
#     else
#         echo ">   vegasFitsWriter has failed to exit cleanly. SIGKILL? \"y\" for yes"
#         read res
#         if [ ${res} = "y" ]; then
#             kill -9 ${vegas_pid}
#         fi
#     fi
# }

control_c()
{
    echo -e "\n> We're finished; cleaning up..."
    cleanup
    exit 130
}

trap control_c SIGINT

echo "> Resetting control FIFOs"
cat /dev/null > /tmp/tchamber/fake_gpu_control
cat /dev/null > /tmp/tchamber/vegas_fits_control

# Run the fake_gpu
echo "> Starting the fake_gpu hashpipe plugin"
taskset 0x0606 hashpipe -p fake_gpu -I 0 -o BINDHOST=px1-2.gb.nrao.edu -o GPUDEV=0 -o XID=0 -c 3 fake_gpu_thread &
hash_pid=$!
echo ">   The PID of the hashpipe instance running fake_gpu is: ${hash_pid}"

# Set status memory keys
echo "> Setting status keys required for vegasFitsWriter"

# This looks in the same directory as this script for set_status
if [ -e "$(dirname ${0})/set_status" ]; then
    $(dirname ${0})/set_status
else
    echo ">   ERROR: set_status not found. It should be in the same directory as this script."
    exit
fi

#Run the fits writer
echo "> Running fits writer"
# /home/sandboxes/tchamber/vegas_devel3/vegas_devel/src/dibas_fits_writer/vegasFitsWriter &
/home/sandboxes/tchamber/bf_fits/beamformer_devel/src/dibas_fits_writer/vegasFitsWriter &
vegas_pid=$!
echo ">   The PID of the vegasFitsWriter is: ${vegas_pid}"

sleep .1
echo -e "\n> READY TO START SCANNING!\n"
echo    ">   Use the \"run_scan\" script to run a scan\n"

# ${response,,} makes response lowercase
while [ "${response,,}" != "quit" -a "${response,,}" != "q" ]; do
    echo "> Enter \"Q[UIT]\" to quit!"
    printf "# "
    read response
#     echo ${response,,}
done

# We're done now; clean up
cleanup